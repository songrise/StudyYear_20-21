-- show 
SELECT * FROM STUDENT;
SELECT * FROM INSTRUCTOR;
SELECT * FROM PROJECT;
SELECT * FROM PREFER;
SELECT * FROM WORKS_ON;

SELECT COUNT(*),STU_ID
FROM PREFER 
GROUP BY STU_ID;

-- test
INSERT INTO PROJECT VALUES(00021,'Quantitative zoology','test');
SELECT * FROM PREFER;


SELECT PROJ_ID, STUDENT.EMAIL AS STUDENT_EMAIL, INSTRUCTOR.EMAIL AS INSTRUCTOR_EMAIL
FROM STUDENT NATURAL JOIN WORKS_ON
             NATURAL JOIN PROJECT 
             LEFT JOIN INSTRUCTOR ON PROJECT.INST_ID = INSTRUCTOR.INST_ID;

UPDATE PREFER SET PROJ_1 = NULL WHERE STU_ID = 'S0001';

SELECT * FROM STUDENT WHERE STU_ID = 'S0001'

SELECT COUNT(DISTINCT INST_ID)
FROM (
SELECT INST_ID
from PREFER JOIN PROJECT ON PREFER.PROJ_1 = PROJECT.PROJ_ID
WHERE STU_ID = :NEW.STU_ID UNION 
SELECT INST_ID
from PREFER JOIN PROJECT ON PREFER.PROJ_2 = PROJECT.PROJ_ID
WHERE STU_ID = :NEW.STU_ID UNION 
SELECT INST_ID
from PREFER JOIN PROJECT ON PREFER.PROJ_3 = PROJECT.PROJ_ID
WHERE STU_ID = :NEW.STU_ID UNION 
SELECT INST_ID
from PREFER JOIN PROJECT ON PREFER.PROJ_4 = PROJECT.PROJ_ID
WHERE STU_ID = :NEW.STU_ID UNION 
SELECT INST_ID
from PREFER JOIN PROJECT ON PREFER.PROJ_5 = PROJECT.PROJ_ID
WHERE STU_ID = :NEW.STU_ID);


SELECT *
from PREFER JOIN PROJECT ON PREFER.PROJ_1 = PROJECT.PROJ_ID;



--! This trigger tests if a student indicated 5 valid preference.
CREATE OR REPLACE TRIGGER PREFERENCE_FULFILLMENT
AFTER INSERT OR UPDATE OF PROJ_1,PROJ_2,PROJ_3,PROJ_4,PROJ_5
ON PREFER
FOR EACH ROW
DECLARE 
    I NUMBER;
BEGIN
    IF :NEW.PROJ_1 IS NOT NULL AND :NEW.PROJ_2 IS NOT NULL AND :NEW.PROJ_3 IS NOT NULL AND :NEW.PROJ_4 IS NOT NULL AND :NEW.PROJ_5 IS NOT NULL THEN
        SELECT COUNT(DISTINCT INST_ID) INTO I
            FROM (
            SELECT INST_ID
            from PREFER JOIN PROJECT ON PREFER.PROJ_1 = PROJECT.PROJ_ID
            WHERE STU_ID = :NEW.STU_ID UNION 
            SELECT INST_ID
            from PREFER JOIN PROJECT ON PREFER.PROJ_2 = PROJECT.PROJ_ID
            WHERE STU_ID = :NEW.STU_ID UNION 
            SELECT INST_ID
            from PREFER JOIN PROJECT ON PREFER.PROJ_3 = PROJECT.PROJ_ID
            WHERE STU_ID = :NEW.STU_ID UNION 
            SELECT INST_ID
            from PREFER JOIN PROJECT ON PREFER.PROJ_4 = PROJECT.PROJ_ID
            WHERE STU_ID = :NEW.STU_ID UNION 
            SELECT INST_ID
            from PREFER JOIN PROJECT ON PREFER.PROJ_5 = PROJECT.PROJ_ID
            WHERE STU_ID = :NEW.STU_ID);
        IF I <> 5 THEN 
            RAISE_APPLICATION_ERROR(-20000,'Duplicate instructors!');
        END IF;
        UPDATE STUDENT
        SET PREFERENCE_FULFILLED = 1
        WHERE STU_ID = :NEW.STU_ID;
    ELSE
        UPDATE STUDENT
        SET PREFERENCE_FULFILLED = 0
        WHERE STU_ID = :NEW.STU_ID;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER DUPLICATE_INSTRUCTORS
AFTER UPDATE OF PREFERENCE_FULFILLED
ON STUDENT
FOR EACH ROW
DECLARE 
    I NUMBER;
BEGIN
    SELECT COUNT(DISTINCT INST_ID) INTO I
        FROM (
        SELECT INST_ID
        from PREFER JOIN PROJECT ON PREFER.PROJ_1 = PROJECT.PROJ_ID
        WHERE STU_ID = :NEW.STU_ID UNION 
        SELECT INST_ID
        from PREFER JOIN PROJECT ON PREFER.PROJ_2 = PROJECT.PROJ_ID
        WHERE STU_ID = :NEW.STU_ID UNION 
        SELECT INST_ID
        from PREFER JOIN PROJECT ON PREFER.PROJ_3 = PROJECT.PROJ_ID
        WHERE STU_ID = :NEW.STU_ID UNION 
        SELECT INST_ID
        from PREFER JOIN PROJECT ON PREFER.PROJ_4 = PROJECT.PROJ_ID
        WHERE STU_ID = :NEW.STU_ID UNION 
        SELECT INST_ID
        from PREFER JOIN PROJECT ON PREFER.PROJ_5 = PROJECT.PROJ_ID
        WHERE STU_ID = :NEW.STU_ID);
    IF I <> 5 THEN 
        RAISE_APPLICATION_ERROR(-20000,'Duplicate instructors!');
    END IF;
END;
/